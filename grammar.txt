terminaux: (à ajouter plus tard)

non terminaux: (à ajouter plus tard)

règles de production:


PROG ::= (BLOC)* 
        | END

BLOC::=  EXPRESSION
             |  LOOP
             |  FUNCTION
             |  DECISION

LOOP::=     for (id in VECTOR) {BLOC}
       |    while (EXPRESSION) {BLOC}
       |    repeat {BLOC}

FUNCTION ::=    function (ARGUMENT){BLOC| Return exp}

ARGUMENT ::=    NONE
            |   (id,)* id

DECISION::=     if(EXPRESSION){BLOC}
            |   if(EXPRESSION){BLOC} else {BLOC}
            |   if(EXPRESSION){BLOC} else DECISION

IDENTIF ::=     id |CALLFUNCTION|DATA

OPERATION::=    IDENTIF [OPERATOR IDENTIF]*


EXPRESSION::=   id<-OPERATION
            |   OPERATION -> id


OPERATOR ::=    == | < | > | + | - | * | /

VECTOR ::=      c(id [,id]*)

CALLFUNCTION ::=   id(None | DATA [,DATA]*) 



                